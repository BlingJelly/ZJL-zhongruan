6.18 学习报告
1813099 邹洁丽
掌握：
1.在编写Python项目时，要建立多个模块，每个模块负责项目的不同部分。这样的分工有助于修改代码，调用函数，无需在代码需要修改时不断寻找所在地，而且防止主程序文件中代码过长，不易理解 ，让大部分工作在模块中完成
2.出现错误“invalid syntax”，可能是前面代码多加了一个括号
3.例如“self.image = pygame.image.load('images/ship.bmp') ”中images文件夹存在于Python项目文件夹中
4.在大型项目中，经常需要在添加新代码前重构既有代码，重构旨在简化既有代码的结构，使其更容易扩展
5.为实现某个特定功能，可以设置不同名称的函数，这样简化主代码，方便后续开发
6.给导入的模块指定别名， 可简化
7.一开始将代码编写得尽可能简单，并在项目越来越复杂时进行重构
8.在完成大型项目时，要不断优化，如本次实验中，优化飞船移动的方式
9.注意if 代码块和elif 代码块，如本次实验中玩家同时按下了左右箭头键，如果使用一个elif 代码块来处理向左移动的情况，右箭头键将始终处于优先地位，无法让移动更准确。
10.rect 的centerx 等属性只能存储整数值
11.在完成大型项目时，要考虑许多bug，如本次实验中如果玩家按住箭头键的时间足够长，飞船将移到屏幕外面，消失得无影无踪
12.小数值有时候更精确，如本次实验中将子弹的 y 坐标存储为小数值，以便能够微调子弹的速度
13.__init__初始化 类
14.注意图形的消失功能，如本次实验中子弹抵达屏幕顶端后消失，这仅仅是因为Pygame无法在屏幕外面绘制它们，这些子弹实际上依然存在，这是个问题，因为它们将继续消耗内存和处理能力
15.注意print语句，因为将输出写入到终端而花费的时间比将图形绘制到游戏窗口花费的时间还多，游戏的速度将大大降低
16.让主循环包含尽可能少的代码，这样只要看函数名就能迅速知道游戏中发生的情况
17.注意游戏安全问题，如本次实验中设置按键Q结束游戏，因为Q键离箭头键和空格键很远，玩家不小心按Q键而导致游戏结束的可能性不大，这样的修改很安全
18.函数int() 将小数部分丢弃
19.函数下面的代码要和函数名建立联系，否则报错
未掌握：
类里的super()还不是很明白
心得体会：
因为有pdf文件一步步的教和老师发的源文件，所以写代码上没有遇到什么困难，最终项目的呈现也很棒。在学习的过程中，逐步了解了大型项目创建时的一种写代码方式和思维模式。学习的时候也遇到了很多Python里的用法，对Python有了更深刻地了解。但如果自己想独立地完成这样一个项目，我还需要勤加练习，进一步掌握Python里面的用法



